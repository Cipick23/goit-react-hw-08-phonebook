{"version":3,"file":"static/js/606.6f812042.chunk.js","mappings":"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","sources":["pages/pageHome/PageHome.jsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","../node_modules/@chakra-ui/layout/src/stack/stack-item.tsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/src/stack/stack.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.utils.tsx","../node_modules/@chakra-ui/layout/src/stack/v-stack.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs"],"sourcesContent":["import { useSelector } from 'react-redux';\nimport authSelectors from '../../redux/auth/authSelectors';\nimport { Box, Text, VStack } from '@chakra-ui/react';\n\nfunction PageHome() {\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\n  return (\n    <Box>\n      <VStack spacing={4}>\n        <Box as=\"h1\" fontSize=\"2xl\" fontWeight=\"semibold\">\n          Welcome ðŸ‘‹\n        </Box>\n        <Box as=\"h2\" fontSize=\"lg\">\n          Now you will exactly not forget your contacts!\n        </Box>\n        {!isLoggedIn && (\n          <Text>\n            Please, <b>Sign up</b> or <b>Log in</b> to have access to the\n            Phonebook!\n          </Text>\n        )}\n      </VStack>\n    </Box>\n  );\n}\n\nexport default PageHome;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","import { ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nStackItem.displayName = \"StackItem\"\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value: keyof typeof dividerStyles) => dividerStyles[value],\n    ),\n  }\n}\n","import { forwardRef } from \"@chakra-ui/system\"\n\nimport { Stack, StackProps } from \"./stack\"\n\n/**\n * A view that arranges its children in a vertical line.\n *\n * @see Docs https://chakra-ui.com/docs/components/stack\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nVStack.displayName = \"VStack\"\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n"],"names":["isLoggedIn","useSelector","authSelectors","_jsx","Box","children","_jsxs","VStack","spacing","as","fontSize","fontWeight","Text","forwardRef","props","ref","styles","useStyleConfig","omitThemingProps","rest","className","align","decoration","casing","aliasedProps","object","clone","Object","assign","key","compact","textAlign","textDecoration","textTransform","chakra","p","cx","__css","displayName","StackItem","div","display","flex","minWidth","freeze","Stack","isInline","directionProp","direction","justify","_props$spacing","wrap","divider","shouldWrapChildren","dividerStyle","useMemo","options","prop","mapper","dividerStyles","column","my","mx","borderLeftWidth","borderBottomWidth","row","value","Array","isArray","map","item","isObject","keys","reduce","result","getDividerStyles","hasDivider","shouldUseChildren","clones","validChildren","getValidChildren","child","index","isLast","length","_child","clonedDivider","cloneElement","_divider","Fragment","_className","alignItems","justifyContent","flexDirection","flexWrap","gap","Children","filter","isValidElement"],"sourceRoot":""}