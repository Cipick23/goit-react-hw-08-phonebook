{"version":3,"file":"static/js/593.17fc886a.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/pageRegistration/PageRegistration.module.css?6fbe","pages/pageRegistration/PageRegistration.jsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx","../node_modules/@chakra-ui/layout/src/stack/stack-item.tsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/src/stack/stack.tsx","../node_modules/@chakra-ui/layout/src/stack/stack.utils.tsx","../node_modules/@chakra-ui/layout/src/stack/v-stack.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formFlex\":\"PageRegistration_formFlex__n01bo\",\"form\":\"PageRegistration_form__icbkw\",\"filterInput\":\"PageRegistration_filterInput__0cB6q\",\"formFieldWrapper\":\"PageRegistration_formFieldWrapper__yDLz8\",\"formIcon\":\"PageRegistration_formIcon__rxJQQ\",\"formField\":\"PageRegistration_formField__lWwOL\",\"formError\":\"PageRegistration_formError__C7e+T\",\"formLabel\":\"PageRegistration_formLabel__8eMIT\",\"formSubmitBtn\":\"PageRegistration_formSubmitBtn__3HC5g\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport authOperations from '../../redux/auth/authOperations';\nimport styles from './PageRegistration.module.css';\n\nfunction PageRegistration() {\n  const dispatch = useDispatch();\n  const [form, setForm] = useState({ name: '', email: '', password: '' });\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    setForm(prevForm => ({ ...prevForm, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(authOperations.register({ ...form }));\n    setForm({ name: '', email: '', password: '' });\n  };\n\n  const { name, email, password } = form;\n\n  return (\n    <Box>\n      <VStack spacing={4}>\n        <Box as=\"h2\" fontSize=\"xl\" fontWeight=\"semibold\">\n          Please enter your registration details\n        </Box>\n        <Box onSubmit={handleSubmit}>\n          <FormControl as=\"form\" className={styles.form}>\n            <FormLabel htmlFor=\"input-register\" className={styles.form}>\n              Name\n              <Input\n                className={styles.filterInput}\n                type=\"text\"\n                name=\"name\"\n                autoComplete=\"name\"\n                id=\"input-register\"\n                pattern=\"^[a-zA-Z]+(([' \\-][a-zA-Z])?[a-zA-Z]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces.\"\n                placeholder=\"Example John\"\n                required\n                value={name}\n                onChange={handleChange}\n              />\n            </FormLabel>\n            <FormLabel htmlFor=\"input-register-mail\" className={styles.form}>\n              Email\n              <Input\n                className={styles.filterInput}\n                type=\"email\"\n                id=\"input-register-mail\"\n                name=\"email\"\n                autoComplete=\"email\"\n                title=\"Enter your email\"\n                placeholder=\"Example user@mail.com\"\n                required\n                value={email}\n                onChange={handleChange}\n              />\n            </FormLabel>\n            <FormLabel htmlFor=\"regPassword\" className={styles.form}>\n              Password\n              <Input\n                className={styles.filterInput}\n                id=\"regPassword\"\n                type=\"password\"\n                name=\"password\"\n                required\n                value={password}\n                onChange={handleChange}\n              />\n            </FormLabel>\n            <Button type=\"submit\" className={styles.formSubmitBtn}>\n              Register\n            </Button>\n          </FormControl>\n        </Box>\n      </VStack>\n    </Box>\n  );\n}\nexport default PageRegistration;\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import { ChakraComponent, chakra } from \"@chakra-ui/system\"\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nStackItem.displayName = \"StackItem\"\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cloneElement, Fragment, useMemo } from \"react\"\n\nimport { StackItem } from \"./stack-item\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   * @default \"0.5rem\"\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   * @default \"column\"\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   *\n   * @default false\n   *\n   * @deprecated - Use `direction=\"row\"` or `HStack` instead\n   */\n  isInline?: boolean\n}\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const dividerStyle = useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const clones = useMemo(() => {\n    const validChildren = getValidChildren(children)\n    return shouldUseChildren\n      ? validChildren\n      : validChildren.map((child, index) => {\n          // Prefer provided child key, fallback to index\n          const key = typeof child.key !== \"undefined\" ? child.key : index\n          const isLast = index + 1 === validChildren.length\n          const wrappedChild = <StackItem key={key}>{child}</StackItem>\n          const _child = shouldWrapChildren ? wrappedChild : child\n\n          if (!hasDivider) return _child\n\n          const clonedDivider = cloneElement(\n            divider as React.ReactElement<any>,\n            {\n              __css: dividerStyle,\n            },\n          )\n\n          const _divider = isLast ? null : clonedDivider\n\n          return (\n            <Fragment key={key}>\n              {_child}\n              {_divider}\n            </Fragment>\n          )\n        })\n  }, [\n    divider,\n    dividerStyle,\n    hasDivider,\n    shouldUseChildren,\n    shouldWrapChildren,\n    children,\n  ])\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={direction}\n      flexWrap={wrap}\n      gap={hasDivider ? undefined : spacing}\n      className={_className}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nStack.displayName = \"Stack\"\n","import { ResponsiveValue, SystemProps } from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface Options {\n  spacing: SystemProps[\"margin\"]\n  direction: StackDirection\n}\n\nexport function getDividerStyles(options: Options) {\n  const { spacing, direction } = options\n\n  const dividerStyles = {\n    column: {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    \"column-reverse\": {\n      my: spacing,\n      mx: 0,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    },\n    row: {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n    \"row-reverse\": {\n      mx: spacing,\n      my: 0,\n      borderLeftWidth: \"1px\",\n      borderBottomWidth: 0,\n    },\n  }\n\n  return {\n    \"&\": mapResponsive(\n      direction,\n      (value: keyof typeof dividerStyles) => dividerStyles[value],\n    ),\n  }\n}\n","import { forwardRef } from \"@chakra-ui/system\"\n\nimport { Stack, StackProps } from \"./stack\"\n\n/**\n * A view that arranges its children in a vertical line.\n *\n * @see Docs https://chakra-ui.com/docs/components/stack\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nVStack.displayName = \"VStack\"\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n"],"names":["dispatch","useDispatch","_useState","useState","name","email","password","_useState2","_slicedToArray","form","setForm","handleChange","e","_e$currentTarget","currentTarget","value","prevForm","_objectSpread","_defineProperty","_jsx","Box","children","_jsxs","VStack","spacing","as","fontSize","fontWeight","onSubmit","preventDefault","authOperations","FormControl","className","styles","FormLabel","htmlFor","Input","type","autoComplete","id","pattern","title","placeholder","required","onChange","Button","createContext","errorMessage","_createContext2","FormControlStylesProvider","useFormControlStyles","strict","_createContext4","FormControlProvider","useFormControlContext","forwardRef","props","ref","useMultiStyleConfig","idProp","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","_useState4","hasHelpText","setHasHelpText","_useState6","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","mergeRefs","node","getLabelProps","dataAttr","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","onFocus","onBlur","useFormControlProvider","omitThemingProps","context","_","cx","chakra","div","__css","displayName","field","helperText","passedProps","useStyleConfig","_props$requiredIndica","requiredIndicator","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","ownProps","_a","label","display","textAlign","span","useFormControl","disabled","readOnly","labelIds","push","join","_b","_c","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","input","_className","size","StackItem","flex","minWidth","Object","freeze","Stack","isInline","directionProp","direction","align","justify","_props$spacing","wrap","divider","shouldWrapChildren","dividerStyle","useMemo","options","prop","mapper","dividerStyles","column","my","mx","borderLeftWidth","borderBottomWidth","row","Array","isArray","map","item","isObject","keys","reduce","result","key","getDividerStyles","hasDivider","shouldUseChildren","clones","validChildren","getValidChildren","child","index","isLast","length","_child","clonedDivider","cloneElement","_divider","Fragment","alignItems","justifyContent","flexDirection","flexWrap","gap","Children","filter","isValidElement"],"sourceRoot":""}