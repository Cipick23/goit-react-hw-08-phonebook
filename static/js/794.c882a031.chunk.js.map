{"version":3,"file":"static/js/794.c882a031.chunk.js","mappings":"wTA8EA,MAlEA,WACE,IAAMA,GAAWC,EAAAA,EAAAA,MACjBC,GAAwBC,EAAAA,EAAAA,UAAS,CAAEC,KAAM,GAAIC,MAAO,GAAIC,SAAU,KAAKC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAAhEO,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAEdI,EAAe,SAAAC,GACnB,IAAAC,EAAwBD,EAAEE,cAAlBV,EAAIS,EAAJT,KAAMW,EAAKF,EAALE,MACdL,GAAQ,SAAAM,GAAQ,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAQ,IAAAE,EAAAA,EAAAA,GAAA,GAAGd,EAAOW,GAAK,GACnD,EAQQX,EAA0BK,EAA1BL,KAAMC,EAAoBI,EAApBJ,MAAOC,EAAaG,EAAbH,SAErB,OACEa,EAAAA,EAAAA,MAACC,EAAAA,GAAG,CAAAC,SAAA,EACFC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAF,SAAC,4CACNF,EAAAA,EAAAA,MAACK,EAAAA,GAAW,CAACC,GAAG,OAAOC,SAXN,SAAAd,GACnBA,EAAEe,iBACF3B,EAAS4B,EAAAA,EAAAA,UAAuBX,EAAAA,EAAAA,GAAC,CAAC,EAAIR,KACtCC,EAAQ,CAAEN,KAAM,GAAIC,MAAO,GAAIC,SAAU,IAC3C,EAOkDe,SAAA,EAC5CF,EAAAA,EAAAA,MAACU,EAAAA,EAAS,CAACC,QAAQ,iBAAgBT,SAAA,CAAC,QAElCC,EAAAA,EAAAA,KAACS,EAAAA,EAAK,CACJC,KAAK,OACL5B,KAAK,OACL6B,aAAa,OACbC,GAAG,iBACHC,QAAQ,4CACRC,MAAM,8DACNC,YAAY,eACZC,UAAQ,EACRvB,MAAOX,EACPmC,SAAU5B,QAGdQ,EAAAA,EAAAA,MAACU,EAAAA,EAAS,CAACC,QAAQ,sBAAqBT,SAAA,CAAC,SAEvCC,EAAAA,EAAAA,KAACS,EAAAA,EAAK,CACJC,KAAK,QACLE,GAAG,sBACH9B,KAAK,QACL6B,aAAa,QACbG,MAAM,mBACNC,YAAY,wBACZC,UAAQ,EACRvB,MAAOV,EACPkC,SAAU5B,QAGdQ,EAAAA,EAAAA,MAACU,EAAAA,EAAS,CAACC,QAAQ,cAAaT,SAAA,CAAC,YAE/BC,EAAAA,EAAAA,KAACS,EAAAA,EAAK,CACJG,GAAG,cACHF,KAAK,WACL5B,KAAK,WACLkC,UAAQ,EACRvB,MAAOT,EACPiC,SAAU5B,QAGdW,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CAACR,KAAK,SAAQX,SAAC,kBAI9B,C,6TC9DA,GAA0DoB,EAAAA,EAAAA,GAExD,CACArC,KAAM,2BACNsC,aAAc,kHACfC,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GALMC,EAAAA,EAAAA,GAA2BC,EAAoB,KA+DtD,GACEJ,EAAAA,EAAAA,GAA0C,CACxCK,QAAQ,EACR1C,KAAM,uBACP2C,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAJIC,EAAAA,EAAAA,GAAqBC,EAAqB,KAsJ1C,IAAMzB,GAAc0B,EAAAA,EAAAA,IACzB,SAAqBC,EAAOC,GAC1B,IAAMC,GAASC,EAAAA,EAAAA,IAAoB,OAAQH,GAE3C,EApJJ,SAAgCA,GAC9B,IACMI,EAMFJ,EANFjB,GACAsB,EAKEL,EALFK,WACAC,EAIEN,EAJFM,UACAC,EAGEP,EAHFO,WACAC,EAEER,EAFFQ,WACGC,GAAAA,EAAAA,EAAAA,GACDT,EAAAA,GAGEU,GAAOC,EAAAA,EAAAA,SACP5B,EAAKqB,GAAU,SAAVA,OAAmBM,GAExBE,EAAU,GAAVA,OAAa7B,EAAE,UACf8B,EAAa,GAAbA,OAAgB9B,EAAE,aAClB+B,EAAa,GAAbA,OAAgB/B,EAAE,aAMxB,GAA8C/B,EAAAA,EAAAA,WAAS,GAAKI,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAArD2D,EAAAA,EAAAA,GAAiBC,EAAkB,KAM1C,GAAsChE,EAAAA,EAAAA,WAAS,GAAKiE,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAA7CC,EAAAA,EAAAA,GAAaC,EAAc,KAGlC,GAA8BnE,EAAAA,EAAAA,WAAS,GAAKoE,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAArCC,EAAAA,EAAAA,GAAWC,EAAQ,KAEpBC,GAAmBC,EAAAA,EAAAA,cACvB,eAACxB,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAGyB,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,4BAC1B1C,GAAI+B,GACDd,GAAAA,CAAAA,EAAAA,CAKHC,KAAKyB,EAAAA,EAAAA,IAAUD,GAAc,SAACE,GACvBA,GACLR,GAAe,EACjB,KAAC,GAEH,CAACL,IAGGc,GAAgBJ,EAAAA,EAAAA,cACpB,eAACxB,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAGyB,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,8BACvBzB,GAAAA,CAAAA,EAAAA,CACHC,IAAKwB,EACL,cAAcI,EAAAA,EAAAA,IAASR,GACvB,iBAAiBQ,EAAAA,EAAAA,IAAStB,GAC1B,gBAAgBsB,EAAAA,EAAAA,IAASvB,GACzB,iBAAiBuB,EAAAA,EAAAA,IAASrB,GAC1BzB,QAAiB,IAAbiB,EAAMjB,GAAmBiB,EAAMjB,GAAK6B,EACxCjC,aAA2B,IAAlBqB,EAAMrB,QAAwBqB,EAAMrB,QAAUI,GAAA,GAEzD,CAACA,EAAIwB,EAAYc,EAAWf,EAAWE,EAAYI,IAG/CkB,GAAuBN,EAAAA,EAAAA,cAC3B,eAACxB,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAGyB,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,4BAC1B1C,GAAI8B,GACDb,GAAAA,CAAAA,EAAAA,CAKHC,KAAKyB,EAAAA,EAAAA,IAAUD,GAAc,SAACE,GACvBA,GACLX,GAAmB,EACrB,IACA,YAAa,aAEf,CAACH,IAGGkB,GAAeP,EAAAA,EAAAA,cACnB,eAACxB,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAGyB,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,sCACvBzB,GACAS,GAAAA,CAAAA,EAAAA,CACHR,IAAKwB,EACLO,KAAM,QACN,cAAcH,EAAAA,EAAAA,IAASR,GACvB,iBAAiBQ,EAAAA,EAAAA,IAAStB,GAC1B,gBAAgBsB,EAAAA,EAAAA,IAASvB,GACzB,iBAAiBuB,EAAAA,EAAAA,IAASrB,IAAU,GAEtC,CAACC,EAAWF,EAAYc,EAAWf,EAAWE,IAG1CyB,GAA4BT,EAAAA,EAAAA,cAChC,eAACxB,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAGyB,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,8BACvBzB,GAAAA,CAAAA,EAAAA,CACHC,IAAKwB,EACLO,KAAM,eACN,eAAe,EACf9D,SAAU8B,EAAM9B,UAAY,QAE9B,IAGF,MAAO,CACLmC,aAAcA,EACdC,YAAaA,EACbE,aAAcA,EACdD,aAAcA,EACdc,YAAaA,EACba,QAAS,kBAAMZ,GAAS,EAAI,EAC5Ba,OAAQ,kBAAMb,GAAS,EAAK,EAC5BP,gBAAAA,EACAC,mBAAAA,EACAE,YAAAA,EACAC,eAAAA,EACApC,GAAAA,EACA6B,QAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAL,UAAAA,EACAc,iBAAAA,EACAO,qBAAAA,EACAC,aAAAA,EACAH,cAAAA,EACAK,0BAAAA,EAEJ,CAwBQG,EALaC,EAAAA,EAAAA,IAAiBrC,IAEhC+B,EAAAA,EAAAA,aAEGO,GADQC,EAAX9B,WACG6B,EAAAA,EAAAA,GAAAA,EAAAA,IAGCE,GAAYC,EAAAA,EAAAA,IAAG,sBAAuBzC,EAAMwC,WAElD,OACE,SAAC3C,EAAAA,CAAoBjC,MAAO0E,EAC1BpE,UAAAA,EAAAA,EAAAA,KAACuB,EAAAA,CAA0B7B,MAAOsC,EAChChC,UAAAA,EAAAA,EAAAA,KAACwE,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACLZ,EAAa,CAAC,EAAG9B,IAAG,IACxBuC,UAAAA,EACAI,MAAO1C,EAAkB,gBAKnC,IAGF7B,EAAYwE,YAAc,eAWI9C,EAAAA,EAAAA,IAC5B,SAAwBC,EAAOC,GAC7B,IAAM6C,EAAQhD,IACRI,EAASR,IACT8C,GAAYC,EAAAA,EAAAA,IAAG,2BAA4BzC,EAAMwC,WACvD,OACE,SAACE,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACLG,MAAAA,OAAAA,EAAAA,EAAOvB,iBAAiBvB,EAAOC,IAAAA,CAAAA,EAAAA,CACnC2C,MAAO1C,EAAO6C,WACdP,UAAAA,IAGN,IAGaK,YAAc,gB,uNCxPhBnE,GAAYqB,EAAAA,EAAAA,IAAoC,SAC3DiD,EACA/C,GAlCF,MAoCQC,GAAS+C,EAAAA,EAAAA,IAAe,YAAaD,GACrChD,GAAQqC,EAAAA,EAAAA,IAAiBW,GAI7B9E,GAIE8B,EALFwC,UAKExC,EAJF9B,UAAAgF,EAIElD,EAHFmD,kBAAAA,OAAAA,IAAoB,YAACC,EAAAA,CAAAA,GAAkB,EAAAC,EAGrCrD,EAFFsD,kBAAAA,OAAAA,IAAoB,SACjBC,GAAAA,EAAAA,EAAAA,GACDvD,EAAAA,GAEE8C,GAAQhD,EAAAA,EAAAA,MACR0D,EAAW,OAAAC,EAAAA,MAAAA,OAAAA,EAAAA,EAAO7B,cAAc2B,EAAMtD,IAA3B,WAAqCA,IAAAA,GAAQsD,GAE9D,OACE,UAACb,EAAAA,EAAAA,OAAYgB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACPF,GAAAA,CAAAA,EAAAA,CACJhB,WAAWC,EAAAA,EAAAA,IAAG,qBAAsBzC,EAAMwC,WAC1CI,OAAAA,EAAAA,EAAAA,GAAAA,CACEe,QAAS,QACTC,UAAW,SACR1D,GAGJhC,SAAAA,CAAAA,GACA4E,MAAAA,OAAAA,EAAAA,EAAOzC,YAAa8C,EAAoBG,KAG/C,IAEA5E,EAAUmE,YAAc,YAQjB,IAAMO,GAAoBrD,EAAAA,EAAAA,IAC/B,SAA2BC,EAAOC,GAChC,IAAM6C,GAAQhD,EAAAA,EAAAA,MACRI,GAASR,EAAAA,EAAAA,KAEf,KAAKoD,MAAAA,OAAAA,EAAAA,EAAOzC,YAAY,OAAO,KAE/B,IAAMmC,GAAYC,EAAAA,EAAAA,IAAG,kCAAmCzC,EAAMwC,WAE9D,OACE,SAACE,EAAAA,EAAAA,MAAWmB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACNf,MAAAA,OAAAA,EAAAA,EAAOb,0BAA0BjC,EAAOC,IAAAA,CAAAA,EAAAA,CAC5C2C,MAAO1C,EAAOiD,kBACdX,UAAAA,IAGN,IAGFY,EAAkBP,YAAc,mB,0QCtEzB,SAASiB,EACd9D,GAEA,MAiBK,SACLA,GA5CF,UA8CQ8C,GAAQhD,EAAAA,EAAAA,MAGZf,EAWEiB,EAXFjB,GACAgF,EAUE/D,EAVF+D,SACAC,EASEhE,EATFgE,SACA7E,EAQEa,EARFb,SACAkB,EAOEL,EAPFK,WACAC,EAMEN,EANFM,UACAE,EAKER,EALFQ,WACAD,EAIEP,EAJFO,WACA2B,EAGElC,EAHFkC,QACAC,EAEEnC,EAFFmC,OACGoB,GAAAA,EAAAA,EAAAA,GACDvD,EAAAA,GAEEiE,EAAqBjE,EAAM,oBAC7B,CAACA,EAAM,qBACP,IAGA8C,MAAAA,OAAAA,EAAAA,EAAO/B,mBAAmB+B,MAAAA,OAAAA,EAAAA,EAAOxC,YACnC2D,EAASC,KAAKpB,EAAMjC,aAGlBiC,MAAAA,OAAAA,EAAAA,EAAO5B,cACT+C,EAASC,KAAKpB,EAAMhC,YAGtB,OAAO,kBACFyC,GAAAA,CAAAA,EAAAA,CACH,mBAAoBU,EAASE,KAAK,WAAQ,EAC1CpF,GAAIA,MAAAA,EAAAA,EAAM+D,MAAAA,OAAAA,EAAAA,EAAO/D,GACjBwB,WAAY,OAAAkD,EAAAA,MAAAA,EAAAA,EAAYlD,GAAZ,EAA0BuC,MAAAA,OAAAA,EAAAA,EAAOvC,WAC7CC,WAAY,OAAA4D,EAAAA,MAAAA,EAAAA,EAAY5D,GAAZ,EAA0BsC,MAAAA,OAAAA,EAAAA,EAAOtC,WAC7CH,WAAY,OAAAgE,EAAAA,MAAAA,EAAAA,EAAYhE,GAAZ,EAA0ByC,MAAAA,OAAAA,EAAAA,EAAOzC,WAC7CC,UAAWA,MAAAA,EAAAA,EAAawC,MAAAA,OAAAA,EAAAA,EAAOxC,UAC/B4B,SAASoC,EAAAA,EAAAA,IAAgBxB,MAAAA,OAAAA,EAAAA,EAAOZ,QAASA,GACzCC,QAAQmC,EAAAA,EAAAA,IAAgBxB,MAAAA,OAAAA,EAAAA,EAAOX,OAAQA,IAE3C,CA3DIoC,CAAoBvE,GADdO,EAAAA,EAAAA,WAAYD,EAAAA,EAAAA,UAAWE,EAAAA,EAAAA,WAAYH,EAAAA,EAAAA,WAAekD,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAG1D,OAAO,kBACFA,GAAAA,CAAAA,EAAAA,CACHQ,SAAUxD,EACVyD,SAAUxD,EACVrB,SAAUkB,EACV,gBAAgBmE,EAAAA,EAAAA,IAASlE,GACzB,iBAAiBkE,EAAAA,EAAAA,IAASnE,GAC1B,iBAAiBmE,EAAAA,EAAAA,IAAShE,IAE9B,C,oECOa5B,GAAQmB,EAAAA,EAAAA,IAAgC,SACnDC,EACAC,GAEA,IAAQwE,EAAsBzE,EAAtByE,SAAalB,GAAAA,EAAAA,EAAAA,GAASvD,EAAAA,GAExBE,GAASC,EAAAA,EAAAA,IAAoB,QAASoD,GAEtCmB,EAAQZ,GADGzB,EAAAA,EAAAA,IAAiBkB,IAE5BoB,GAAalC,EAAAA,EAAAA,IAAG,eAAgBzC,EAAMwC,WAE5C,OACE,SAACE,EAAAA,EAAAA,OAAYgC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CACXE,KAAMH,GACFC,GAAAA,CAAAA,EAAAA,CACJ9B,MAAO1C,EAAO4C,MACd7C,IAAAA,EACAuC,UAAWmC,IAGjB,IAEA/F,EAAMiE,YAAc,QAGpBjE,EAAMG,GAAK,O,4LCnCEX,GAAO2B,EAAAA,EAAAA,IAA2B,SAAcC,EAAOC,GAClE,IAAMC,GAAS+C,EAAAA,EAAAA,IAAe,OAAQjD,GACtC,GACEqC,EAAAA,EAAAA,IAAiBrC,GAD8BuD,GAAzCf,EAAAA,UAAWqC,EAAAA,MAAOC,EAAAA,WAAYC,EAAAA,QAAWxB,EAAAA,EAAAA,GAAAA,EAAAA,IAG3CyB,ECvCR,SAAiBC,GACf,IAAMC,EAAQC,OAAOC,OAAO,CAAC,EAAGH,GAChC,IAAK,IAAII,KAAOH,OACK,IAAfA,EAAMG,WACDH,EAAMG,GAEjB,OAAOH,CACT,CDgCuBI,CAAQ,CAC3B1B,UAAW5D,EAAM6E,MACjBU,eAAgBvF,EAAM8E,WACtBU,cAAexF,EAAM+E,SAGvB,OACE,SAACrC,EAAAA,EAAAA,GAAQ+C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CACPxF,IAAAA,EACAuC,WAAWC,EAAAA,EAAAA,IAAG,cAAezC,EAAMwC,YAC/BwC,GACAzB,GAAAA,CAAAA,EAAAA,CACJX,MAAO1C,IAGb,IAEA9B,EAAKyE,YAAc,M","sources":["pages/pageRegistration/PageRegistration.jsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Text,\n} from '@chakra-ui/react';\nimport authOperations from '../../redux/auth/authOperations';\n\nfunction PageRegistration() {\n  const dispatch = useDispatch();\n  const [form, setForm] = useState({ name: '', email: '', password: '' });\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    setForm(prevForm => ({ ...prevForm, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(authOperations.register({ ...form }));\n    setForm({ name: '', email: '', password: '' });\n  };\n\n  const { name, email, password } = form;\n\n  return (\n    <Box>\n      <Text>Please enter your registration details</Text>\n      <FormControl as=\"form\" onSubmit={handleSubmit}>\n        <FormLabel htmlFor=\"input-register\">\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            autoComplete=\"name\"\n            id=\"input-register\"\n            pattern=\"^[a-zA-Z]+(([' \\-][a-zA-Z])?[a-zA-Z]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces.\"\n            placeholder=\"Example John\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n        </FormLabel>\n        <FormLabel htmlFor=\"input-register-mail\">\n          Email\n          <Input\n            type=\"email\"\n            id=\"input-register-mail\"\n            name=\"email\"\n            autoComplete=\"email\"\n            title=\"Enter your email\"\n            placeholder=\"Example user@mail.com\"\n            required\n            value={email}\n            onChange={handleChange}\n          />\n        </FormLabel>\n        <FormLabel htmlFor=\"regPassword\">\n          Password\n          <Input\n            id=\"regPassword\"\n            type=\"password\"\n            name=\"password\"\n            required\n            value={password}\n            onChange={handleChange}\n          />\n        </FormLabel>\n        <Button type=\"submit\">Register</Button>\n      </FormControl>\n    </Box>\n  );\n}\nexport default PageRegistration;\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n"],"names":["dispatch","useDispatch","_useState","useState","name","email","password","_useState2","_slicedToArray","form","setForm","handleChange","e","_e$currentTarget","currentTarget","value","prevForm","_objectSpread","_defineProperty","_jsxs","Box","children","_jsx","Text","FormControl","as","onSubmit","preventDefault","authOperations","FormLabel","htmlFor","Input","type","autoComplete","id","pattern","title","placeholder","required","onChange","Button","createContext","errorMessage","_createContext2","FormControlStylesProvider","useFormControlStyles","strict","_createContext4","FormControlProvider","useFormControlContext","forwardRef","props","ref","styles","useMultiStyleConfig","idProp","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","_useState4","hasHelpText","setHasHelpText","_useState6","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","mergeRefs","node","getLabelProps","dataAttr","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","onFocus","onBlur","useFormControlProvider","omitThemingProps","context","_","className","cx","chakra","div","__css","displayName","field","helperText","passedProps","useStyleConfig","_props$requiredIndica","requiredIndicator","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","ownProps","_a","label","display","textAlign","span","useFormControl","disabled","readOnly","labelIds","push","join","_b","_c","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","input","_className","size","align","decoration","casing","aliasedProps","object","clone","Object","assign","key","compact","textDecoration","textTransform","p"],"sourceRoot":""}